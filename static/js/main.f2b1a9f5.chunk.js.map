{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","$","on","toggleClass","removeClass","className","href","class","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAMqBA,E,kLAEjBC,IAAE,eAAeC,GAAG,SAAS,WAC3BD,IAAE,iBAAiBE,YAAY,aAIjCF,IAAE,mBAAmBC,GAAG,SAAS,WAC/BD,IAAE,iBAAiBG,YAAY,e,+BAMjC,OACE,6BACJ,yBAAKC,UAAU,cAAa,uBAAGC,KAAK,KAAR,SAC5B,6BAASD,UAAU,gBACjB,6BACE,8CAGF,6BACE,6BACE,4BACE,4BAAI,uBAAGC,KAAK,WAAR,WACJ,4BAAI,uBAAGA,KAAK,YAAR,YACJ,4BAAI,uBAAGA,KAAK,YAAR,aAEN,4BACE,4BAAI,uBAAGA,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,WAAR,WACJ,4BAAI,uBAAGA,KAAK,WAAR,YAEN,4BACE,4BAAI,uBAAGA,KAAK,SAAR,SACJ,4BAAI,uBAAGA,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,UAAR,cAOZ,6BAASC,MAAM,gBACb,6BAAK,2CACL,yBAAKC,GAAG,UACN,yBAAKH,UAAU,UAAf,kBAEF,2DAIA,yBAAKG,GAAG,WACN,yBAAKH,UAAU,WAAf,oBAEF,4DAGA,yBAAKG,GAAG,WACN,yBAAKH,UAAU,WAAf,oBAEF,4DAIA,yBAAKG,GAAG,SACN,yBAAKH,UAAU,SAAf,cAEF,uDAIA,yBAAKG,GAAG,UACN,yBAAKH,UAAU,UAAf,gBAEF,wDAIA,yBAAKG,GAAG,UACN,yBAAKH,UAAU,UAAf,gBAEF,wDAIA,yBAAKG,GAAG,QACN,yBAAKH,UAAU,QAAf,gBAEF,yDAIA,yBAAKG,GAAG,SACN,yBAAKH,UAAU,SAAf,kBAEF,0DAIA,yBAAKG,GAAG,SACN,yBAAKH,UAAU,SAAf,kBAEF,gE,GAxG6BI,IAAMC,WCMnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f2b1a9f5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport $ from 'jquery';\n\n\n\nexport default class App extends React.Component{\n  componentDidMount(){\n    $('.mobile-nav').on('click', ()=>{  \n      $('.sidebar-menu').toggleClass('toggle');\n    \n    }); \n    \n    $('.sidebar-menu a').on('click', ()=>{\n      $('.sidebar-menu').removeClass('toggle');\n    });\n  }\n  \n\n  render(){\n    return(\n      <div>\n  <div className='mobile-nav'><a href='#'>Menu</a></div>\n  <section className='sidebar-menu'>\n    <div>\n      <h1>CSS Transform</h1>\n    </div>\n    \n    <div>\n      <nav>\n        <ul>\n          <li><a href='#rotate'>Rotate</a></li>\n          <li><a href='#rotateX'>RotateX</a></li>\n          <li><a href='#rotateY'>RotateY</a></li>\n        </ul>\n        <ul>\n          <li><a href='#scale'>Scale</a></li>\n          <li><a href='#scaleX'>ScaleX</a></li>\n          <li><a href='#scaleY'>ScaleY</a></li>\n        </ul>\n        <ul>\n          <li><a href='#skew'>Skew</a></li>\n          <li><a href='#skewX'>SkewX</a></li>\n          <li><a href='#skewY'>SkewY</a></li>\n        </ul>\n      </nav>\n    </div>\n    \n  </section>\n  \n  <section class='content-body'>\n    <div><div>No effect</div></div>\n    <div id='rotate'>\n      <div className='rotate'>340deg rotate</div>\n     </div>\n    <pre>\n    \n    transform: rotate(340deg);\n    </pre>\n    <div id='rotateX'>\n      <div className='rotateX'>Rotate X 180deg</div>\n    </div>\n    <pre>\n    transform: rotateX(180deg);\n    </pre>\n    <div id='rotateY'>\n      <div className='rotateY'>Rotate Y 180deg</div>\n    </div>\n    <pre>\n    \n    transform: rotateY(180deg);\n    </pre>\n    <div id='scale'>\n      <div className='scale'>Scale 1.3</div>\n     </div>\n    <pre>\n    \n    transform: scale(1.3);\n    </pre>\n    <div id='scaleX'>\n      <div className='scaleX'>Scale X 1.3</div>\n    </div>\n    <pre>\n    \n    transform: scaleX(1.3);\n    </pre>\n    <div id='scaleY'>\n      <div className='scaleY'>Scale Y 1.3</div>\n    </div>\n    <pre>\n    \n    transform: scaleY(1.3);\n    </pre>\n    <div id='skew'>\n      <div className='skew'>Skew 340deg</div>\n    </div>\n    <pre>\n    \n    transform: skew(340deg);\n    </pre>\n    <div id='skewX'>\n      <div className='skewX'>Skew X 340deg</div>\n    </div>\n    <pre>\n    \n    transform: skewX(340deg);\n    </pre>\n    <div id='skewY'>\n      <div className='skewY'>Skew Y 340deg</div>\n    </div>\n    <pre>\n    \n    transform: skewY(340deg);\n    </pre>\n    \n  </section> \n  \n\n    </div>)\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}